import { EmitterSubscription } from 'react-native';
import AdiveryBanner from './adivery-banner-ad-view';
import { Banner, SmartBanner, LargeBanner, MediumRectangle } from './banner-size';
import AdiveryNativeAd from './AdiveryNativeAd';
declare type NativeAd = {
    id: string;
    headline: string;
    description: string;
    advertiser: string;
    call_to_action: string;
    icon: string;
    image: string;
};
declare class AdiveryImpl {
    _onRewardedLoadedSubscription?: EmitterSubscription;
    _onRewardedShownSubscription?: EmitterSubscription;
    _onRewardedClickSubscription?: EmitterSubscription;
    _onRewardedCloseSubscription?: EmitterSubscription;
    _onInterstitialLoadedSubscription?: EmitterSubscription;
    _onInterstitialShownSubscription?: EmitterSubscription;
    _onInterstitialClickSubscription?: EmitterSubscription;
    _onInterstitialCloseSubscription?: EmitterSubscription;
    _onAppOpenLoadedSubscription?: EmitterSubscription;
    _onAppOpenShownSubscription?: EmitterSubscription;
    _onAppOpenClickSubscription?: EmitterSubscription;
    _onAppOpenCloseSubscription?: EmitterSubscription;
    _onErrorSubscription?: EmitterSubscription;
    _onRewardedAdLoaded?: (placementId: string) => void;
    _onRewardedAdShown?: (placementId: string) => void;
    _onRewardedAdClicked?: (placementId: string) => void;
    _onRewardedAdClosed?: (placementId: string, isRewarded: boolean) => void;
    _onInterstitialAdLoaded?: (placementId: string) => void;
    _onInterstitialAdShown?: (placementId: string) => void;
    _onInterstitialAdClicked?: (placementId: string) => void;
    _onInterstitialAdClosed?: (placementId: string) => void;
    _onAppOpenAdloaded?: (placementId: string) => void;
    _onAppOpenAdShown?: (placementId: string) => void;
    _onAppOpenAdClicked?: (placementId: string) => void;
    _onAppOpenAdClosed?: (placementId: string) => void;
    _onError?: (placementId: string, message: string) => void;
    REWARD_LOADED_EVENT_NAME: string;
    REWARD_SHOWN_EVENT_NAME: string;
    REWARD_CLICKED_EVENT_NAME: string;
    REWARD_CLOSED_EVENT_NAME: string;
    INTERSTITIAL_LOADED_EVENT_NAME: string;
    INTERSTITIAL_SHOWN_EVENT_NAME: string;
    INTERSTITIAL_CLICKED_EVENT_NAME: string;
    INTERSTITIAL_CLOSED_EVENT_NAME: string;
    APP_OPEN_LOADED_EVENT_NAME: string;
    APP_OPEN_SHOWN_EVENT_NAME: string;
    APP_OPEN_CLICKED_EVENT_NAME: string;
    APP_OPEN_CLOSED_EVENT_NAME: string;
    ON_ERROR_EVENT_NAME: string;
    configure(appId: string): void;
    configureEventEmitter(): void;
    prepareRewardedAd(placementId: string): void;
    prepareInterstitialAd(placementId: string): void;
    prepareAppOpenAd(placementId: string): void;
    isLoaded(placementId: string): Promise<any>;
    setUserId(userId: string): void;
    showAd(placementId: string): void;
    showAppOpenAd(placementId: string): void;
    requestNativeAd(placementId: string): Promise<NativeAd>;
    recordNativeAdImpression(ad: NativeAd): void;
    recordNativeAdClick(ad: NativeAd): void;
    addGlobalListener({ onRewardedAdLoaded, onRewardedAdShown, onRewardedAdClosed, onRewardedAdClicked, onInterstitialAdLoaded, onInterstitialAdShown, onInterstitialAdClicked, onInterstitialAdClosed, onAppOpenAdLoaded, onAppOpenAdShown, onAppOpenAdClicked, onAppOpenAdClosed, onError, }: {
        onRewardedAdLoaded?: ((_: string) => void) | undefined;
        onRewardedAdShown?: ((_: string) => void) | undefined;
        onRewardedAdClosed?: ((_: string, __: boolean) => void) | undefined;
        onRewardedAdClicked?: ((_: string) => void) | undefined;
        onInterstitialAdLoaded?: ((_: string) => void) | undefined;
        onInterstitialAdShown?: ((_: string) => void) | undefined;
        onInterstitialAdClicked?: ((_: string) => void) | undefined;
        onInterstitialAdClosed?: ((_: string) => void) | undefined;
        onAppOpenAdLoaded?: ((_: string) => void) | undefined;
        onAppOpenAdShown?: ((_: string) => void) | undefined;
        onAppOpenAdClicked?: ((_: string) => void) | undefined;
        onAppOpenAdClosed?: ((_: string) => void) | undefined;
        onError?: ((_: string, __: string) => void) | undefined;
    }): void;
    destroy(): void;
}
declare const Adivery: AdiveryImpl;
export { AdiveryBanner, AdiveryNativeAd, Adivery, Banner, SmartBanner, LargeBanner, MediumRectangle, NativeAd, };
