{"version":3,"sources":["AdiveryNativeAd.tsx"],"names":["AdiveryNativeAd","placementId","child","fallback","nativeAd","setNativeAd","Adivery","requestNativeAd","then","recordNativeAdImpression"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AASA,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,KAA6C;AACnE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B,qBAA0B,IAA1B,CAAhC;AACA,wBAAU,MAAM;AACd,QAAID,QAAJ,EAAc;AACZ;AACD;;AACDE,qBAAQC,eAAR,CAAwBN,WAAxB,EAAqCO,IAArC,CAA2CJ,QAAD,IAAc;AACtDC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACD,KAFD;AAGD,GAPD,EAOG,CAACA,QAAD,CAPH;;AAQA,MAAIA,QAAJ,EAAc;AACZE,qBAAQG,wBAAR,CAAiCL,QAAjC;;AACA,wBAAO,6BAAC,iBAAD,QAAOF,KAAK,CAACE,QAAD,CAAZ,CAAP;AACD;;AACD,SAAOD,QAAP;AACD,CAfD;;eAiBeH,e","sourcesContent":["import { Adivery, NativeAd } from 'adivery';\nimport React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\nimport type { ReactElement } from 'react';\n\ntype Props = {\n  placementId: string;\n  child: (ad: NativeAd) => ReactElement;\n  fallback: ReactElement;\n};\n\nconst AdiveryNativeAd = ({ placementId, child, fallback }: Props) => {\n  const [nativeAd, setNativeAd] = useState<NativeAd | null>(null);\n  useEffect(() => {\n    if (nativeAd) {\n      return;\n    }\n    Adivery.requestNativeAd(placementId).then((nativeAd) => {\n      setNativeAd(nativeAd);\n    });\n  }, [nativeAd]);\n  if (nativeAd) {\n    Adivery.recordNativeAdImpression(nativeAd);\n    return <View>{child(nativeAd)}</View>;\n  }\n  return fallback;\n};\n\nexport default AdiveryNativeAd;\n"]}