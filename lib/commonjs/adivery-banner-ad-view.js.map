{"version":3,"sources":["adivery-banner-ad-view.tsx"],"names":["ComponentName","RCTAdiveryBanner","AdiveryBanner","React","Component","constructor","props","StyleSheet","create","container","justifyContent","_onAdLoaded","bind","_onAdClicked","_onError","onAdLoaded","onAdClicked","onError","componentDidMount","eventEmmiter","NativeEventEmitter","NativeModules","Adivery","adLoadSubscription","addListener","BANNER_LOADED_EVENT","event","placementId","adClickedSubscription","BANNER_CLICKED_EVENT","adErrorSubscription","BANNER_ERROR_EVENT","message","componentWillUnmount","remove","render","width","_getWidth","height","_getHeight","bannerSize","Banner","LargeBanner","MediumRectangle","dpi","_getScreenDpi","ratio","PixelRatio","get"],"mappings":"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","sourcesContent":["import { Banner, LargeBanner, MediumRectangle } from './banner-size';\nimport React from 'react';\nimport { EmitterSubscription, PixelRatio } from 'react-native';\nimport {\n  requireNativeComponent,\n  NativeEventEmitter,\n  StyleSheet,\n} from 'react-native';\nimport { NativeModules } from 'react-native';\n\nconst ComponentName = 'AdiveryBannerAdView';\n\ntype BannerProps = {\n  style: any;\n  placementId: string;\n  bannerSize: number;\n};\n\nconst RCTAdiveryBanner = requireNativeComponent<BannerProps>(ComponentName);\n\ntype RCTBannerProps = {\n  placementId: string;\n  bannerSize: number;\n  onAdLoaded: () => void;\n  onAdClicked: () => void;\n  onError: (message: string) => void;\n};\n\nclass AdiveryBanner extends React.Component<RCTBannerProps> {\n  onAdLoaded: () => void;\n  onAdClicked: () => void;\n  onError: (message: string) => void;\n\n  adLoadSubscription?: EmitterSubscription;\n  adClickedSubscription?: EmitterSubscription;\n  adErrorSubscription?: EmitterSubscription;\n\n  BANNER_LOADED_EVENT = 'AdiveryBannerLoaded';\n  BANNER_CLICKED_EVENT = 'AdiveryBannerClicked';\n  BANNER_ERROR_EVENT = 'AdiveryBannerError';\n\n  props: RCTBannerProps;\n\n  constructor(props: RCTBannerProps) {\n    super(props);\n    this.props = props;\n    this._onAdLoaded = this._onAdLoaded.bind(this);\n    this._onAdClicked = this._onAdClicked.bind(this);\n    this._onError = this._onError.bind(this);\n    this.onAdLoaded = props.onAdLoaded;\n    this.onAdClicked = props.onAdClicked;\n    this.onError = props.onError;\n  }\n\n  componentDidMount() {\n    const eventEmmiter = new NativeEventEmitter(NativeModules.Adivery);\n    this.adLoadSubscription = eventEmmiter.addListener(\n      this.BANNER_LOADED_EVENT,\n      (event) => {\n        if (event.placementId == this.props.placementId) {\n          this._onAdLoaded();\n        }\n      }\n    );\n    this.adClickedSubscription = eventEmmiter.addListener(\n      this.BANNER_CLICKED_EVENT,\n      (event) => {\n        if (event.placementId == this.props.placementId) {\n          this._onAdClicked();\n        }\n      }\n    );\n    this.adErrorSubscription = eventEmmiter.addListener(\n      this.BANNER_ERROR_EVENT,\n      (event) => {\n        if (event.placementId == this.props.placementId) {\n          this._onError(event.message);\n        }\n      }\n    );\n  }\n\n  componentWillUnmount() {\n    this.adLoadSubscription?.remove();\n    this.adClickedSubscription?.remove();\n    this.adErrorSubscription?.remove();\n  }\n\n  _onAdLoaded() {\n    if (!this.onAdLoaded) {\n      return;\n    }\n    this.onAdLoaded();\n  }\n\n  _onAdClicked() {\n    if (!this.onAdClicked) {\n      return;\n    }\n    this.onAdClicked();\n  }\n\n  _onError(message: string) {\n    if (!this.onError) {\n      return;\n    }\n    this.onError(message);\n  }\n\n  render() {\n    return (\n      <RCTAdiveryBanner\n        style={{ width: this._getWidth(), height: this._getHeight() }}\n        placementId={this.props.placementId}\n        bannerSize={this.props.bannerSize}\n      />\n    );\n  }\n\n  style = StyleSheet.create({\n    container: {\n      justifyContent: 'center',\n    },\n  });\n\n  _getWidth() {\n    switch (this.props.bannerSize) {\n      case Banner:\n        return 320;\n      case LargeBanner:\n        return 320;\n      case MediumRectangle:\n        return 300;\n    }\n    return '100%';\n  }\n\n  _getHeight() {\n    switch (this.props.bannerSize) {\n      case Banner:\n        return 50;\n      case LargeBanner:\n        return 100;\n      case MediumRectangle:\n        return 250;\n    }\n    const dpi = this._getScreenDpi();\n    if (dpi <= 240) {\n      return 50;\n    }\n    return 90;\n  }\n\n  _getScreenDpi() {\n    const ratio = PixelRatio.get();\n    const dpi = ratio * 160;\n    return dpi;\n  }\n}\n\nexport default AdiveryBanner;\n"]}